#!/usr/bin/python3
"""
Create group accounts

Create group accounts, optionally assigning them static GIDs.

Runs `groupadd` from the buildhost to create the groups listed in `groups`.
If no `gid` is given, `groupadd` will choose one.

If the specified group name or GID is already in use, this stage will fail.
"""


import subprocess
import sys

import osbuild.api
from osbuild.util import ostree


SCHEMA = """
"additionalProperties": false,
"properties": {
    "ostree": {
    "additionalProperties": false,
    "type": "object",
    "description": "Specify an OSTree deployment",
    "properties": {
      "deployment": {
        "additionalProperties": false,
        "type": "object",
        "description": "Specify an OSTree deployment",
        "properties": {
          "osname": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          }
        }
      }
    }
  },
  "groups": {
    "type": "object",
    "additionalProperties": false,
    "description": "Keys are group names, values are objects with group info",
    "patternProperties": {
      "^[A-Za-z0-9_][A-Za-z0-9_-]{0,31}$": {
        "type": "object",
        "properties": {
          "gid": {
            "type": "number",
            "description": "GID for this group"
          }
        }
      }
    }
  }
}
"""


def groupadd(root, name, gid=None):
    arguments = []
    if gid:
        arguments += ["--gid", str(gid)]

    subprocess.run(["groupadd", "--root", root, *arguments, name], check=True)


def main(tree, options):

    ostree_options = options.get("ostree", {}).get("deployment")
    if ostree_options:
        osname = ostree_options["osname"]
        ref = ostree_options["ref"]

        repo = f"{tree}/ostree/repo"
        commit = ostree.rev_parse(repo, ref)

        # this created a state root at `osname`
        stateroot = f"{tree}/ostree/deploy/{osname}"

        # now that we have a deployment, we do have a sysroot
        sysroot = f"{stateroot}/deploy/{commit}.0"

        print(f"ostree support active: sysroot: {sysroot}")

        tree = sysroot

    groups = options["groups"]

    for name, group_options in groups.items():
        gid = group_options.get("gid")

        groupadd(tree, name, gid)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
